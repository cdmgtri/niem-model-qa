[
  {
    "id": "facet_definition_duplicate",
    "description": "Facets should probably have unique definitions within their type.",
    "category": "Invalid value",
    "component": "Facet",
    "field": "definition",
    "scope": "all",
    "source": "model",
    "severity": "warning",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "facet_definition_escaped",
    "description": "Facet definitions should not contain escaped apostrophes.",
    "category": "Invalid value",
    "component": "Facet",
    "field": "definition",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "facet_definition_missing_code",
    "description": "Codes (enumerations) must have definitions.",
    "category": "Missing value",
    "component": "Facet",
    "field": "definition",
    "scope": "enumerations",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "9-14",
    "exampleValid": "Code facet 'MON' must have a definition (e.g., 'Monday').",
    "exampleInvalid": "Length facet '10' is not required to have a definition.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "facet_definition_missing_pattern",
    "description": "Pattern should probably have a definition to make it easier for other users to understand the intended values.",
    "category": "Missing value",
    "component": "Facet",
    "field": "definition",
    "scope": "patterns",
    "source": "model",
    "severity": "info",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Pattern facet '\\d{3}-\\d{3}-\\d{4}' should have a definition (e.g., 'Telephone number format matching the pattern ###-###-####').",
    "exampleInvalid": "Length facet '10' is not required to have a definition.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "facet_definition_formatting",
    "description": "Facet definitions should not contain tabs, new lines, or carriage returns.",
    "category": "Invalid value",
    "component": "Facet",
    "field": "definition",
    "scope": "all",
    "source": "model",
    "severity": "warning",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "facet_kind_invalid",
    "description": "Facets must have a valid style (e.g., enumeration, pattern, etc.).",
    "category": "Invalid value",
    "component": "Facet",
    "field": "kind",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "facet_type_complex",
    "description": "Facets cannot belong to a complex type.",
    "category": "Invalid value",
    "component": "Facet",
    "field": "name",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Code 'MON' can belong to simple type 'WeekdayCodeSimpleType'.",
    "exampleInvalid": "Code 'MON' cannot belong to complex object type 'nc:PersonType'.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "facet_type_repTerm_code",
    "description": "Codes must belong to types whose names end with \"CodeSimpleType\"",
    "category": "Invalid value",
    "component": "Facet",
    "field": "name",
    "scope": "enumerations",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "11-7",
    "exampleValid": "Code 'MON' can belong to a type named 'WeekdayCodeSimpleType'.",
    "exampleInvalid": "Code 'MON' cannot belong to a type named 'WeekdaySimpleType'.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "facet_type_unknown",
    "description": "Facets must belong to an existing type.",
    "category": "Invalid value",
    "component": "Facet",
    "field": "name",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "facet_value_duplicate_code",
    "description": "It is recommended that codes should be unique within their type.",
    "category": "Invalid value",
    "component": "Facet",
    "field": "value",
    "scope": "all",
    "source": "model",
    "severity": "warning",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Type 'WeekdayCodeSimpleType' with codes 'MON', 'TUE', 'WED', ...",
    "exampleInvalid": "Type 'WeekdayCodeSimpleType' with codes 'MON', 'MON', 'MON', ...",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "facet_value_missing",
    "description": "Facets must have a value (e.g., a code value or a pattern value, etc).",
    "category": "Missing value",
    "component": "Facet",
    "field": "value",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "facet_value_spaces",
    "description": "Facet values should not contain leading or trailing spaces.",
    "category": "Invalid value",
    "component": "Facet",
    "field": "value",
    "scope": "all",
    "source": "model",
    "severity": "warning",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_definition_spellcheck",
    "description": "Property definitions should use words and terms that are either defined in the dictionary or as \"Local Terminology\".",
    "category": "Invalid value",
    "component": "Property",
    "field": "definition",
    "scope": "all",
    "source": "model",
    "severity": "warning",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Definition 'A FIPS state codes\" is valid if the term 'FIPS' is defined as Local Terminology in that namespace.",
    "exampleInvalid": "A FIPS state codes\" is not recommended if the term 'FIPS' is not defined as Local Terminology in that namespace.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_group_invalid",
    "description": "Property substitution groups must be valid (element and has a compatible type).",
    "category": "Invalid value",
    "component": "Property",
    "field": "group",
    "scope": "elements",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_group_unknown",
    "description": "Property substitution groups must exist.",
    "category": "Bad reference",
    "component": "Property",
    "field": "group",
    "scope": "elements",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_name_camelCase_attribute",
    "description": "Attribute names must begin with a lower case letter.",
    "category": "Invalid value",
    "component": "Property",
    "field": "name",
    "scope": "attributes",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "10-48",
    "exampleValid": "Attribute name 'sequenceID' is valid because it begins with a lower case letter.",
    "exampleInvalid": "Attribute name 'SequenceID' is not valid because it begins with an upper case letter.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_name_camelCase_element",
    "description": "Element names must begin with an upper case letter.",
    "category": "Invalid value",
    "component": "Property",
    "field": "name",
    "scope": "elements",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "10-49",
    "exampleValid": "Element name 'Person' is valid because it begins with an upper case letter.",
    "exampleInvalid": "Element name 'person' is not valid because it begins with a lower case letter.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_name_duplicate",
    "description": "Properties must have unique names within their namespaces.",
    "category": "Duplicate",
    "component": "Property",
    "field": "name",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_name_invalidChar",
    "description": "Property names must use valid characters.",
    "category": "Invalid value",
    "component": "Property",
    "field": "name",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "10-45",
    "exampleValid": "Property name 'Person' uses valid characters.",
    "exampleInvalid": "Property name 'PersonIsCitizen?' does not use valid characters.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_name_missing",
    "description": "Properties must have names.",
    "category": "Invalid value",
    "component": "Property",
    "field": "name",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_name_spellcheck",
    "description": "Property names must use terms that either have standard dictionary entries or are custom defined as Local Terminology.",
    "category": "Invalid value",
    "component": "Property",
    "field": "name",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "10-44",
    "exampleValid": "Property name 'nc:StateFIPSCode' is valid if the nc namespace defines the meaning of 'FIPS' in its Local Terminology section.",
    "exampleInvalid": "Property name 'nc:StateFIPSCode' is not valid if the nc namespace does not define 'FIPS' in its Local Terminology section.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_name_repTerm_aug",
    "description": "Augmentation property names should correspond to their augmentation point elements, with the representation term \"AugmentationPoint\" replaced by term \"Augmentation\".",
    "category": "Invalid value",
    "component": "Property",
    "field": "name",
    "scope": "augmentation points",
    "source": "model",
    "severity": "warning",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Property name 'PersonAugmentation' is valid for a property that substitutes for augmentation point element 'nc:PersonAugmentationPoint'.",
    "exampleInvalid": "Property name 'ManagerAugmentation' is not valid for a property that substitutes for augmentation point element 'nc:PersonAugmentationPoint'.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_prefix_missing",
    "description": "Properties must have a namespace prefix.",
    "category": "Missing value",
    "component": "Property",
    "field": "prefix",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_prefix_unknown",
    "description": "Property namespace prefixes must be defined.",
    "category": "Invalid value",
    "component": "Property",
    "field": "prefix",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_style_abstract",
    "description": "An abstract property must be an element.",
    "category": "Invalid value",
    "component": "Property",
    "field": "style",
    "scope": "abstract elements",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_style_substitution",
    "description": "A property with a substitution group must be an element.",
    "category": "Invalid value",
    "component": "Property",
    "field": "style",
    "scope": "substitutable elements",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_type_abstract",
    "description": "An abstract element should probably not have a data type.",
    "category": "Invalid value",
    "component": "Property",
    "field": "type",
    "scope": "abstract elements",
    "source": "model",
    "severity": "warning",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_type_attribute",
    "description": "An attribute must have a simple data type.",
    "category": "Invalid value",
    "component": "Property",
    "field": "type",
    "scope": "attributes",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_type_element",
    "description": "An element that is not abstract must have a complex data type.",
    "category": "Invalid value",
    "component": "Property",
    "field": "type",
    "scope": "elements",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_type_missing",
    "description": "A property that is not abstract must have a data type.",
    "category": "Missing value",
    "component": "Property",
    "field": "type",
    "scope": "concrete elements and attributes",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "property_type_unknown",
    "description": "A property's data type must exist.",
    "category": "Bad reference",
    "component": "Property",
    "field": "type",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_base_assn",
    "description": "Association types must extend another association type.",
    "category": "Invalid value",
    "component": "Type",
    "field": "base",
    "scope": "association types",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "10-21",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_base_aug",
    "description": "Augmentation types must extend structures:AugmentationType.",
    "category": "Invalid value",
    "component": "Type",
    "field": "base",
    "scope": "augmentation types",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "10-35",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_base_invalid_csc",
    "description": "Complex types with simple content (CSC) must have a simple or CSC base type.",
    "category": "Invalid value",
    "component": "Type",
    "field": "base",
    "scope": "CSC types",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Simple content type HairColorCodeType can have a base type like HairColorCodeSimpleType (simple type).",
    "exampleInvalid": "Simple content type HairColorCodeType cannot have a type like nc:PersonType (complex object type).",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_base_invalid_simple",
    "description": "Simple types should use a XML schema simple type as its base type.",
    "category": "Invalid value",
    "component": "Type",
    "field": "base",
    "scope": "simple types",
    "source": "model",
    "severity": "warning",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Simple type ext:HairColorCodeSimpleType can have base type xs:token.",
    "exampleInvalid": "Simple type ext:HairColorCodeSimpleType should not have base type ext:ColorCodeSimpleType.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_base_metadata",
    "description": "Metadata types must extend structures:MetadataType",
    "category": "Invalid value",
    "component": "Type",
    "field": "base",
    "scope": "metadata types",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "10-39",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_base_missing_simpleContent",
    "description": "Types that represent a value (simple content) must declare a base type.",
    "category": "Missing value",
    "component": "Type",
    "field": "base",
    "scope": "simple content types",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Type HairColorCodeSimpleType needs a base type like xs:string or xs:token.",
    "exampleInvalid": "Type HairColorCodeSimpleType is not valid without a base type.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_base_union",
    "description": "Simple union types must not have a base type",
    "category": "Invalid value",
    "component": "Type",
    "field": "base",
    "scope": "union types",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_base_unknown",
    "description": "Types must have bases that are defined.",
    "category": "Bad reference",
    "component": "Type",
    "field": "base",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Type PersonType can extend type structures:ObjectType (this type exists).",
    "exampleInvalid": "Type PersonType cannot extend type structures:BogusType (this type does not exist).",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_definition_missing_complex",
    "description": "Complex types must have a definition.",
    "category": "Missing value",
    "component": "Type",
    "field": "definition",
    "scope": "complex types",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "9-26",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_definition_missing_simple",
    "description": "Simple types must have a definition.",
    "category": "Missing value",
    "component": "Type",
    "field": "definition",
    "scope": "simple types",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "9-12",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_definition_phrase_complex",
    "description": "Complex type definitions must begin with the standard opening phrase \"A data type\".",
    "category": "Definition phrasing",
    "component": "Type",
    "field": "definition",
    "scope": "complex types",
    "source": "model",
    "severity": "warning",
    "spec": "NDR",
    "version": "4.0",
    "rule": "11-44",
    "exampleValid": "Definition 'A data type for a human being' is valid for type 'PersonType'.",
    "exampleInvalid": "Definition 'A human being' is not valid for type 'PersonType'.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_definition_phrase_simple",
    "description": "Simple type definitions must begin with the standard opening phrase \"A data type\".",
    "category": "Definition phrasing",
    "component": "Type",
    "field": "definition",
    "scope": "simple types",
    "source": "model",
    "severity": "warning",
    "spec": "NDR",
    "version": "4.0",
    "rule": "11-45",
    "exampleValid": "Definition 'A data type for United States state codes' is valid for type usps:StateCodeSimpleType.",
    "exampleInvalid": "Definition 'United States state codes' is not valid for type usps:StateCodeSimpleType.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_definition_spellcheck",
    "description": "Type definitions should use words and terms that are either defined in the dictionary or as \"Local Terminology\".",
    "category": "Invalid value",
    "component": "Type",
    "field": "definition",
    "scope": "all",
    "source": "model",
    "severity": "warning",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Definition 'A data type for FIPS state codes\" is valid if the term 'FIPS' is defined as Local Terminology in that namespace.",
    "exampleInvalid": "Definition 'A data type for FIPS state codes\" is not recommended if the term 'FIPS' is not defined as Local Terminology in that namespace.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_name_camelCase",
    "description": "Type names must begin with an upper case letter.",
    "category": "Invalid value",
    "component": "Type",
    "field": "name",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "10-49",
    "exampleValid": "Type name 'PersonType' is valid because it begins with an upper case letter.",
    "exampleInvalid": "Type name 'personType' is not valid because it begins with a lower case letter.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_name_duplicate",
    "description": "Type names must not occur more than once in a single namespace.",
    "category": "Duplicate",
    "component": "Type",
    "field": "name",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Types 'justice:CaseType' and 'logistics:CaseType' are valid because even though they use the same name, they are defined in different namespaces.",
    "exampleInvalid": "Type name 'CaseType' cannot be defined twice in the justice namespace.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_name_inconsistent_codeType",
    "description": "Complex types that use the representation term \"CodeType\" should be named similarly to their base type.",
    "category": "Invalid value",
    "component": "Type",
    "field": "name",
    "scope": "code types",
    "source": "model",
    "severity": "warning",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Type name 'HairColorCodeType' is valid with base type 'HairColorCodeSimpleType'.",
    "exampleInvalid": "Type name 'HairColorCodeType' is not recommended with base type 'EyeColorCodeSimpleType'.",
    "exceptionLabels": [
      "nc:CodeType"
    ],
    "ran": false
  },
  {
    "id": "type_name_invalidChar",
    "description": "Type names must use valid characters.",
    "category": "Invalid value",
    "component": "Type",
    "field": "name",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "10-45",
    "exampleValid": "Type name \"PersonType\" uses valid characters.",
    "exampleInvalid": "Type name \"ID#Type\" does not use valid characters.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_name_missing_complex",
    "description": "Complex types must have a name.",
    "category": "Missing value",
    "component": "Type",
    "field": "name",
    "scope": "complex types",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "9-25",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_name_missing_simple",
    "description": "Simple types must have a name.",
    "category": "Missing value",
    "component": "Type",
    "field": "name",
    "scope": "simple types",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "9-10",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_name_repTerm_assn",
    "description": "Association type names must end with the representation term \"AssociationType\".",
    "category": "Rep term",
    "component": "Type",
    "field": "name",
    "scope": "association types",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Type name 'PersonLocationAssociationType' is a valid association type name.",
    "exampleInvalid": "Type name 'PersonLocationType' is not a valid association type name.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_name_repTerm_aug",
    "description": "Augmentation type names must end with the representation term \"AugmentationType\".",
    "category": "Rep term",
    "component": "Type",
    "field": "name",
    "scope": "augmentation types",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "10-34",
    "exampleValid": "Type name 'PersonAugmentationType' is a valid augmentation type name.",
    "exampleInvalid": "Type name 'PersonType' is not a valid augmentation type name.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_name_repTerm_codeSimpleType",
    "description": "Simple types that use the representation term \"CodeSimpleType\" must declare codes.",
    "category": "Rep term",
    "component": "Type",
    "field": "name",
    "scope": "code simple types",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "11-8",
    "exampleValid": "Type name 'WeekdayCodeSimpleType' is valid if the type declares codes.",
    "exampleInvalid": "Type name 'WeekdayCodeSimpleType' is not valid if the type does not declare codes.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_name_repTerm_codeType",
    "description": "Complex types that use the representation term \"CodeType\" must have a base type that uses the representation term \"CodeSimpleType\".",
    "category": "Rep term",
    "component": "Type",
    "field": "name",
    "scope": "code types",
    "source": "model",
    "severity": "warning",
    "spec": "NDR",
    "version": "4.0",
    "rule": "10-18",
    "exampleValid": "Type name 'WeekdayCodeSimpleType' is not valid if the type does not declare codes.",
    "exampleInvalid": "Type name 'WeekdayCodeType' is not valid with base type 'string'",
    "exceptionLabels": [
      "nc:CodeType"
    ],
    "ran": false
  },
  {
    "id": "type_name_repTerm_complex",
    "description": "Complex type names must not end with the representation term \"SimpleType\".",
    "category": "Rep term",
    "component": "Type",
    "field": "name",
    "scope": "complex types",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Type name 'IDSimpleType' is valid if the type is simple.",
    "exampleInvalid": "Type name 'IDSimpleType' is not valid if the type is complex.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_name_repTerm_list",
    "description": "Simple list type names must end with the representation term \"ListSimpleType\".",
    "category": "Rep term",
    "component": "Type",
    "field": "name",
    "scope": "list types",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Type name 'DecimalListSimpleType' is a valid list type name.",
    "exampleInvalid": "Type name 'DecimalValuesSimpleType' is not a valid list type name.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_name_repTerm_metadata",
    "description": "Metadata type names must end with the representation term \"MetadataType\".",
    "category": "Rep term",
    "component": "Type",
    "field": "name",
    "scope": "metadata types",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Type name 'SourceMetadataType' is a valid metadata type name.",
    "exampleInvalid": "Type name 'SourceType' is not a valid metadata type name.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_name_repTerm_simple",
    "description": "Simple type names must end with the representation term \"SimpleType\".",
    "category": "Rep term",
    "component": "Type",
    "field": "name",
    "scope": "simple types",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "11-3",
    "exampleValid": "Type name 'IDSimpleType' is valid if the type is simple.",
    "exampleInvalid": "Type name 'IDType' is not valid if the type is simple.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_name_repTerm_type",
    "description": "Type names must end with the representation term \"Type\".",
    "category": "Rep term",
    "component": "Type",
    "field": "name",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "11-1",
    "exampleValid": "Type name 'PersonType' is valid.",
    "exampleInvalid": "Type name 'Person' is not valid.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_name_reservedTerm_type",
    "description": "Type names should not use the term \"Type\" in the name other than as the final representation term.",
    "category": "Invalid value",
    "component": "Type",
    "field": "name",
    "scope": "all",
    "source": "model",
    "severity": "warning",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Type name 'IDCategoryCodeType' is valid because the term 'Type' only appears at the end of the name.",
    "exampleInvalid": "Type name 'IDTypeCodeType' is not valid because the term 'Type' is used in the middle of the name.",
    "exceptionLabels": [
      "biom:Type2CrossReferenceListType",
      "j:PersonBloodTypeCodeSimpleType",
      "j:PersonBloodTypeCodeType",
      "jp3-52:AirspaceCoordinatingMeasureTypeAndUsageType",
      "jp3-52:AirspaceCoordinatingMeasureTypeCodeSimpleType",
      "jp3-52:AirspaceCoordinatingMeasureTypeCodeType",
      "mo:UnitTypeCodeTextSimpleType"
    ],
    "ran": false
  },
  {
    "id": "type_name_spellcheck",
    "description": "Type names must use terms that either have standard dictionary entries or are custom defined as Local Terminology.",
    "category": "Invalid value",
    "component": "Type",
    "field": "name",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "NDR",
    "version": "4.0",
    "rule": "10-44",
    "exampleValid": "Type name 'ncic:VMOCodeType' is valid if the ncic namespace defines the meaning of 'VMO' in its Local Terminology section.",
    "exampleInvalid": "Type name 'ncic:VMOCodeType' is not valid if the ncic namespace does not defined 'VMO' in its Local Terminology section.",
    "exceptionLabels": [],
    "notes": "NDR rule does not mention local terminology.",
    "ran": false
  },
  {
    "id": "type_prefix_missing",
    "description": "Types must have a namespace prefix.",
    "category": "Missing value",
    "component": "Type",
    "field": "prefix",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Type PersonType can be associated with a namespace prefix like 'nc'.",
    "exampleInvalid": "Type PersonType should not have a missing namespace prefix.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_prefix_unknown",
    "description": "Type namespace prefixes must be defined.",
    "category": "Invalid value",
    "component": "Type",
    "field": "prefix",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Type PersonType can have namespace prefix 'nc' if that prefix is declared.",
    "exampleInvalid": "Type PersonType cannot have namespace prefix 'unk' if there is no declaration of what 'unk' is.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_style_assn",
    "description": "Types with names that end with \"AssociationType\" must have style \"association\".",
    "category": "Invalid value",
    "component": "Type",
    "field": "style",
    "scope": "association types",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_style_aug",
    "description": "Types with names that end with \"AugmentationType\" must have style \"augmentation\".",
    "category": "Invalid value",
    "component": "Type",
    "field": "style",
    "scope": "augmentation types",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_style_metadata",
    "description": "Types with names that end with \"MetadataType\" must have style \"metadata\".",
    "category": "Invalid value",
    "component": "Type",
    "field": "style",
    "scope": "metadata types",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_style_missing",
    "description": "Types must have a style.",
    "category": "Missing value",
    "component": "Type",
    "field": "style",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Type PersonType has style 'object'.",
    "exampleInvalid": "Type PersonType does not have a style.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "type_style_unknown",
    "description": "Type styles should be one of the following: object, adapter, association, augmentation, CSC, simple, list, union, or blank (defaults to \"object\").",
    "category": "Invalid value",
    "component": "Type",
    "field": "style",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exampleValid": "Type PersonType has permitted style 'object'.",
    "exampleInvalid": "Type PersonType cannot have unknown style 'myCustomObject'.",
    "exceptionLabels": [],
    "ran": false
  },
  {
    "id": "namespace_definition_spellcheck",
    "description": "Namespace definitions should use words and terms that are either defined in the dictionary or as \"Local Terminology\".",
    "category": "Invalid value",
    "component": "Namespace",
    "field": "definition",
    "scope": "all",
    "source": "model",
    "severity": "error",
    "spec": "",
    "version": "",
    "rule": "",
    "exceptionLabels": [],
    "ran": false
  }
]